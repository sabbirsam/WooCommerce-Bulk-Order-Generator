/******/ (() => { // webpackBootstrap
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other entry modules.
(() => {
/*!*************************!*\
  !*** ./js/generator.js ***!
  \*************************/
// Tabs ----------------------------------------
jQuery(document).ready(function ($) {
  // Check localStorage for the last active tab
  var activeTab = localStorage.getItem('activeTab');
  if (activeTab) {
    // Set the saved active tab
    $('.nav-tab').removeClass('nav-tab-active');
    $('.tab-content').removeClass('active');
    $(".nav-tab[href=\"".concat(activeTab, "\"]")).addClass('nav-tab-active');
    $(activeTab).addClass('active');
  } else {
    // Default to the first tab if no active tab is saved
    $('.nav-tab').first().addClass('nav-tab-active');
    $('.tab-content').first().addClass('active');
  }

  // Tab switching functionality
  $('.nav-tab').on('click', function (e) {
    e.preventDefault();

    // Set clicked tab as active
    $('.nav-tab').removeClass('nav-tab-active');
    $(this).addClass('nav-tab-active');
    $('.tab-content').removeClass('active');
    $($(this).attr('href')).addClass('active');

    // Save the active tab to localStorage
    localStorage.setItem('activeTab', $(this).attr('href'));
  });
});

// CSV importer ---------------------------------
jQuery(document).ready(function ($) {
  $('.file-upload-input').on('change', function (e) {
    var file = e.target.files[0];
    var $preview = $('.file-upload-preview');
    if (file) {
      $preview.html(" \n                <div class=\"file-name-display\">\n                    \uD83D\uDCC4 ".concat(file.name, "\n                </div>\n            "));
    }
  });
});

// --------------Order -------------------------------------
jQuery(document).ready(function ($) {
  if (!$('#toast-container').length) {
    $('body').append('<div id="toast-container" style="position: fixed; top: 40px; right: 20px; z-index: 10000;"></div>');
  }
  function showToast(message) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'success';
    var toast = $("\n            <div class=\"wc-toast ".concat(type, "\">\n                ").concat(message, "\n            </div>\n        "));
    $('#toast-container').append(toast);

    // Trigger reflow and animate in
    setTimeout(function () {
      return toast.css('opacity', '1');
    }, 10);

    // Auto remove after 3 seconds
    setTimeout(function () {
      toast.css('opacity', '0');
      setTimeout(function () {
        return toast.remove();
      }, 300);
    }, 3000);
  }
  var isGenerating = false;
  var totalOrders = 0;
  var successCount = 0;
  var failedCount = 0;
  var currentBatch = 0;
  var isStopping = false;
  var startTime;
  function formatDuration(ms) {
    var seconds = Math.floor(ms / 1000);
    var minutes = Math.floor(seconds / 60);
    var hours = Math.floor(minutes / 60);
    return "".concat(hours, "h ").concat(minutes % 60, "m ").concat(seconds % 60, "s");
  }
  function resetAll() {
    isGenerating = false;
    isStopping = false;
    totalOrders = 0;
    successCount = 0;
    failedCount = 0;
    currentBatch = 0;

    // Reset all display values
    $('.progress-bar').css('width', '0%');
    $('#total-processed').text('0');
    $('#success-count').text('0');
    $('#failed-count').text('0');
    $('#processing-rate').text('0');
    $('#elapsed-time').text('0s');
    $('#time-remaining').text('--');
    $('#num_orders').val('100');

    // Reset buttons
    $('#start-generation').prop('disabled', false);
    $('#stop-generation').prop('disabled', true);
    $('#reset-generation').hide();

    // Clear status
    $('#generation-status').hide();
  }
  function updateProgress() {
    var totalProcessed = successCount + failedCount;
    var percentage = totalProcessed / totalOrders * 100;
    $('.progress-bar').css('width', percentage + '%');
    $('#total-processed').text(totalProcessed);
    $('#success-count').text(successCount);
    $('#failed-count').text(failedCount);
    var elapsedTime = (Date.now() - startTime) / 1000;
    var ordersPerSecond = totalProcessed / elapsedTime;
    $('#processing-rate').text(ordersPerSecond.toFixed(2));
    var remainingOrders = totalOrders - totalProcessed;
    var estimatedSecondsRemaining = remainingOrders / ordersPerSecond;
    $('#time-remaining').text(formatDuration(estimatedSecondsRemaining * 1000));
    $('#elapsed-time').text(formatDuration(Date.now() - startTime));
  }
  function stopGeneration() {
    return $.ajax({
      url: wcOrderGenerator.ajaxurl,
      type: 'POST',
      data: {
        action: 'stop_order_generation',
        nonce: wcOrderGenerator.nonce
      }
    });
  }
  function processBatch() {
    if (!isGenerating || isStopping) {
      finishGeneration('Order Generation stopped', 'warning');
      showToast('Order Generation stopped', 'warning');
      return;
    }
    var totalProcessed = successCount + failedCount;
    var remainingOrders = totalOrders - totalProcessed;
    if (remainingOrders <= 0) {
      finishGeneration('Order Generation complete!', 'success');
      showToast('Order Generation complete!', 'success');
      return;
    }
    var currentBatchSize = Math.min($('#batch_size').val(), remainingOrders);
    console.log(currentBatchSize);
    $('#generation-status').text("Processing batch ".concat(currentBatch + 1, "...")).removeClass().addClass('notice notice-info').show();
    $.ajax({
      url: wcOrderGenerator.ajaxurl,
      type: 'POST',
      data: {
        action: 'process_order_batch',
        nonce: wcOrderGenerator.nonce,
        batch_size: currentBatchSize,
        batch_number: currentBatch
      },
      success: function success(response) {
        if (response.success) {
          successCount += response.data.success;
          failedCount += response.data.failed;
          currentBatch++;
          updateProgress();
          if (!isStopping) {
            setTimeout(processBatch, 500);
          } else {
            finishGeneration('Generation stopped', 'warning');
            showToast('Order Generation stopped', 'warning');
          }
        } else {
          handleError('Error processing batch: ' + response.data);
          showToast('Eror processing batch', 'error');
        }
      },
      error: function error(xhr, status, _error) {
        if (!isStopping) {
          handleError('Server error occurred: ' + _error);
          showToast('Server error occurred', 'error');
        } else {
          finishGeneration('Generation stopped', 'warning');
          showToast('Order Generation stopped', 'warning');
        }
      }
    });
  }
  function finishGeneration(message, type) {
    $('#generation-status').text(message).removeClass().addClass("notice notice-".concat(type)).show();
    isGenerating = false;
    isStopping = false;
    $('#start-generation').prop('disabled', false);
    $('#stop-generation').prop('disabled', true);
    $('#reset-generation').show();
  }
  function handleError(message) {
    var batchSize = 0;
    failedCount += batchSize;
    updateProgress();
    $('#time-remaining').text(formatDuration(failedCount));
    finishGeneration(message, 'error');
  }
  $('#order-generator-form').on('submit', function (e) {
    e.preventDefault();
    var numOrders = parseInt($('#num_orders').val());
    if (numOrders < 1 || numOrders > 10000) {
      alert('Please enter a number between 1 and 10k');
      return;
    }
    var batch_size = parseInt($('#batch_size').val());
    if (batch_size < 5 || batch_size > 30) {
      alert('Please enter a batch number between 5 and 30');
      return;
    }
    isGenerating = true;
    isStopping = false;
    totalOrders = numOrders;
    successCount = 0;
    failedCount = 0;
    currentBatch = 0;
    startTime = Date.now();
    $('#start-generation').prop('disabled', true);
    $('#stop-generation').prop('disabled', false);
    $('#reset-generation').hide();
    $('#generation-status').text('Starting generation...').removeClass().addClass('notice notice-info').show();
    $('.progress-bar').css('width', '0%');
    processBatch();
  });
  $('#stop-generation').on('click', function () {
    if (!isGenerating) return;
    isStopping = true;
    $(this).prop('disabled', true);
    $('#generation-status').text('Stopping generation...').removeClass().addClass('notice notice-warning').show();
    stopGeneration().fail(function (xhr, status, error) {
      console.error('Failed to stop generation:', error);
    });
  });
  $('#reset-generation').on('click', resetAll);
});

//------------------------------ Product ----------------------------------

jQuery(document).ready(function ($) {
  // Add toast container if it doesn't exist
  if (!$('#toast-container').length) {
    $('body').append('<div id="toast-container" style="position: fixed; top: 40px; right: 20px; z-index: 10000;"></div>');
  }
  function showToast(message) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'success';
    var toast = $("\n            <div class=\"wc-toast ".concat(type, "\">\n                ").concat(message, "\n            </div>\n        "));
    $('#toast-container').append(toast);

    // Trigger reflow and animate in
    setTimeout(function () {
      return toast.css('opacity', '1');
    }, 10);

    // Auto remove after 3 seconds
    setTimeout(function () {
      toast.css('opacity', '0');
      setTimeout(function () {
        return toast.remove();
      }, 300);
    }, 3000);
  }

  // Product Generation Code
  var isGeneratingProducts = false;
  var totalProducts = 0;
  var productSuccessCount = 0;
  var productFailedCount = 0;
  var currentProductBatch = 0;
  var productStartTime;
  function resetProductGeneration() {
    isGeneratingProducts = false;
    totalProducts = 0;
    productSuccessCount = 0;
    productFailedCount = 0;
    currentProductBatch = 0;

    // Reset display values
    $('.product-progress-bar').css('width', '0%');
    $('#products-processed').text('0');
    $('#products-failed').text('0');

    // Reset buttons
    $('#start-product-generation').prop('disabled', false);
    $('#stop-product-generation').prop('disabled', true);
    $('#reset-product-generation').hide();

    // Clear status
    $('#product-generation-status').hide();
  }
  function updateProductProgress() {
    var totalProcessed = productSuccessCount + productFailedCount;
    var percentage = totalProcessed / totalProducts * 100;

    // Update progress bar
    $('.product-progress-bar').css('width', percentage + '%');

    // Update statistics
    $('#products-processed').text(productSuccessCount);
    $('#products-failed').text(productFailedCount);
  }
  function processProductBatch() {
    if (!isGeneratingProducts) {
      $('#product-generation-status').text('Generation stopped').removeClass().addClass('notice notice-warning').show();
      $('#start-product-generation').prop('disabled', false);
      $('#stop-product-generation').prop('disabled', true);
      $('#reset-product-generation').show();
      showToast('Product Generation stopped', 'warning');
      return;
    }
    var remainingProducts = totalProducts - (productSuccessCount + productFailedCount);
    if (remainingProducts <= 0) {
      $('#product-generation-status').text('Product generation complete!').removeClass().addClass('notice notice-success').show();
      $('#start-product-generation').prop('disabled', false);
      $('#stop-product-generation').prop('disabled', true);
      $('#reset-product-generation').show();
      showToast('Product Generation complete!', 'success');
      return;
    }
    var currentBatchSize = Math.min($('#product_batch_size').val(), remainingProducts);
    $('#product-generation-status').text("Processing product batch ".concat(currentProductBatch + 1, "...")).removeClass().addClass('notice notice-info').show();
    $.ajax({
      url: wcOrderGenerator.ajaxurl,
      type: 'POST',
      data: {
        action: 'process_product_batch',
        nonce: wcOrderGenerator.products_nonce,
        batch_size: currentBatchSize,
        price_min: $('#price_min').val(),
        price_max: $('#price_max').val(),
        batch_number: currentProductBatch
      },
      success: function success(response) {
        if (response.success) {
          productSuccessCount += response.data.success;
          productFailedCount += response.data.failed;
          currentProductBatch++;
          updateProductProgress();
          setTimeout(processProductBatch, 500);
        } else {
          handleProductError('Error processing product batch: ' + response.data);
        }
      },
      error: function error() {
        handleProductError('Server error occurred during product generation');
      }
    });
  }
  function handleProductError(message) {
    productFailedCount += parseInt($('#product_batch_size').val());
    updateProductProgress();
    $('#product-generation-status').text(message).removeClass().addClass('notice notice-error').show();
    isGeneratingProducts = false;
    $('#start-product-generation').prop('disabled', false);
    $('#stop-product-generation').prop('disabled', true);
    $('#reset-product-generation').show();
  }
  $('#product-generator-form').on('submit', function (e) {
    e.preventDefault();
    var numProducts = parseInt($('#num_products').val());
    if (numProducts < 1 || numProducts > 10000) {
      alert('Please enter a number between 1 and 10k');
      return;
    }
    var product_batch_size = parseInt($('#product_batch_size').val());
    if (product_batch_size < 5 || product_batch_size > 30) {
      alert('Please enter a batch number between 5 and 30');
      return;
    }
    isGeneratingProducts = true;
    totalProducts = numProducts;
    productSuccessCount = 0;
    productFailedCount = 0;
    currentProductBatch = 0;
    productStartTime = Date.now();
    $('#start-product-generation').prop('disabled', true);
    $('#stop-product-generation').prop('disabled', false);
    $('#reset-product-generation').hide();
    $('#product-generation-status').text('Starting product generation...').removeClass().addClass('notice notice-info').show();
    $('.product-progress-bar').css('width', '0%');
    processProductBatch();
  });
  $('#stop-product-generation').on('click', function () {
    isGeneratingProducts = false;
    $(this).prop('disabled', true);
    $('#product-generation-status').text('Stopping product generation...').removeClass().addClass('notice notice-warning').show();
  });
  $('#reset-product-generation').on('click', resetProductGeneration);
});

//export ----------------------------------------

jQuery(document).ready(function ($) {
  if (!$('#toast-container').length) {
    $('body').append('<div id="toast-container" style="position: fixed; top: 40px; right: 20px; z-index: 10000;"></div>');
  }
  function showToast(message) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'success';
    var toast = $("\n            <div class=\"wc-toast ".concat(type, "\">\n                ").concat(message, "\n            </div>\n        "));
    $('#toast-container').append(toast);

    // Trigger reflow and animate in
    setTimeout(function () {
      return toast.css('opacity', '1');
    }, 10);

    // Auto remove after 3 seconds
    setTimeout(function () {
      toast.css('opacity', '0');
      setTimeout(function () {
        return toast.remove();
      }, 300);
    }, 3000);
  }
  var exportIsGenerating = false;
  var exportTotalOrders = 0;
  var exportStartTime = 0;

  // Always set export all to true by default
  $('#export-all').prop('checked', true);
  $('#order-export-form').on('submit', function (e) {
    e.preventDefault();
    var batchSize = parseInt($('#export-batch-size').val());
    var exportAll = true; // Always export all orders
    var statuses = $('#export-status').val() || [];
    $.ajax({
      url: wcOrderGenerator.ajaxurl,
      type: 'POST',
      data: {
        action: 'start_order_export',
        nonce: wcOrderGenerator.export_nonce,
        batch_size: batchSize,
        export_all: exportAll,
        statuses: statuses
      },
      success: function success(response) {
        if (response.success) {
          exportIsGenerating = true;
          exportTotalOrders = response.data.total_orders;
          exportStartTime = Date.now();

          // Disable export button during process
          $('#start-order-export').prop('disabled', true);
          processExportBatch(0, response.data.export_session);
        } else {
          showToast('Export initialization failed: ' + response.data, 'error');
        }
      }
    });
  });
  function processExportBatch(batchNumber, exportSession) {
    var batchSize = parseInt($('#export-batch-size').val());
    var statuses = $('#export-status').val() || [];
    var totalBatches = Math.ceil(exportTotalOrders / batchSize);
    $.ajax({
      url: wcOrderGenerator.ajaxurl,
      type: 'POST',
      data: {
        action: 'export_order_batch',
        nonce: wcOrderGenerator.export_nonce,
        batch_size: batchSize,
        batch_number: batchNumber,
        total_batches: totalBatches,
        export_all: true,
        statuses: statuses,
        export_session: exportSession
      },
      success: function success(response) {
        if (response.success) {
          var processed = (batchNumber + 1) * batchSize;
          updateExportProgress(Math.min(processed, exportTotalOrders), response.data.success, response.data.failed);
          if (!response.data.is_last_batch) {
            processExportBatch(batchNumber + 1, exportSession);
          } else {
            exportIsGenerating = false;
            $('#start-order-export').prop('disabled', false);

            // Trigger file download
            window.location.href = response.data.download_url;
          }
        } else {
          showToast('Export batch failed!' + response.data, 'error');
        }
      }
    });
  }
  function updateExportProgress(processed, success, failed) {
    // Ensure exportTotalOrders is initialized and greater than 0
    if (!exportTotalOrders || exportTotalOrders <= 0) {
      showToast("Exporting number of order not found!", 'info');
      return;
    }
    var percentage = Math.min(processed / exportTotalOrders * 100, 100); // Ensure it does not exceed 100%

    // Ensure progress bar width is set correctly
    $('.export-progress-bar').css({
      'width': percentage + '%',
      'background-color': 'blue',
      'height': '25px',
      'transition': 'width 0.5s ease-in-out'
    });

    // Update processed, success, and failed counts
    $('#export-total-processed').text(processed);
    $('#export-success-count').text(success);
    $('#export-failed-count').text(failed);

    // Calculate elapsed time and handle NaN
    var currentTime = Date.now();
    var elapsedTime = exportStartTime ? currentTime - exportStartTime : 0;
    $('#export-elapsed-time').text(elapsedTime > 0 ? formatDuration(elapsedTime) : '0s');

    // Calculate orders per second and handle NaN
    var ordersPerSecond = elapsedTime > 0 ? processed / (elapsedTime / 1000) : 0;

    // Calculate remaining time and handle NaN
    var remainingOrders = exportTotalOrders - processed;
    var estimatedSecondsRemaining = ordersPerSecond > 0 ? remainingOrders / ordersPerSecond : 0;
    $('#export-time-remaining').text(estimatedSecondsRemaining > 0 ? formatDuration(estimatedSecondsRemaining * 1000) : '0s');
  }
  function formatDuration(ms) {
    var seconds = Math.floor(ms / 1000);
    var minutes = Math.floor(seconds / 60);
    var hours = Math.floor(minutes / 60);
    return "".concat(hours, "h ").concat(minutes % 60, "m ").concat(seconds % 60, "s");
  }

  // Reset buttons
  $('#reset-order-export').on('click', function () {
    exportIsGenerating = false;
    $('.export-progress-bar').css('width', '0%');
    $('#export-total-processed, #export-success-count, #export-failed-count').text('0');
    $('#export-elapsed-time').text('0s');
    $('#export-time-remaining').text('--');
    $('#start-order-export').prop('disabled', false);
  });
});

// product export ----------------

jQuery(document).ready(function ($) {
  if (!$('#toast-container').length) {
    $('body').append('<div id="toast-container" style="position: fixed; top: 40px; right: 20px; z-index: 10000;"></div>');
  }
  function showToast(message) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'success';
    var toast = $("\n            <div class=\"wc-toast ".concat(type, "\">\n                ").concat(message, "\n            </div>\n        "));
    $('#toast-container').append(toast);

    // Trigger reflow and animate in
    setTimeout(function () {
      return toast.css('opacity', '1');
    }, 10);

    // Auto remove after 3 seconds
    setTimeout(function () {
      toast.css('opacity', '0');
      setTimeout(function () {
        return toast.remove();
      }, 300);
    }, 3000);
  }

  // Product Export functionality
  var productExportIsGenerating = false;
  var productExportTotalProducts = 0;
  var productExportStartTime = 0;
  var exportFailedAttempts = 0;
  var MAX_FAILED_ATTEMPTS = 3;
  var exportTimeout;
  $('#product-export-form').on('submit', function (e) {
    e.preventDefault();
    var batchSize = parseInt($('#product-export-batch-size').val());
    var productTypes = $('#product-type').val() || [];
    var categories = $('#product-category').val() || [];
    var tags = $('#product-tag').val() || [];

    // Reset any previous export state
    exportFailedAttempts = 0;
    clearTimeout(exportTimeout);
    $.ajax({
      url: wcOrderGenerator.ajaxurl,
      type: 'POST',
      data: {
        action: 'start_product_export',
        nonce: wcOrderGenerator.export_products_nonce,
        batch_size: batchSize,
        product_types: productTypes,
        categories: categories,
        tags: tags
      },
      success: function success(response) {
        if (response.success) {
          productExportIsGenerating = true;
          productExportTotalProducts = response.data.total_products;
          productExportStartTime = Date.now();

          // Show total products that will be exported
          showToast("Starting export of ".concat(productExportTotalProducts, " products"), 'info');

          // Disable export button during process
          $('#start-product-export').prop('disabled', true);

          // Initialize progress display
          $('#product-export-total-processed').text('0');
          $('#product-export-success-count').text('0');
          $('#product-export-failed-count').text('0');
          $('#product-export-elapsed-time').text('0s');
          $('#product-export-time-remaining').text('--');
          $('.product-export-progress-bar').css('width', '0%');
          processProductExportBatch(0, response.data.export_session);
        } else {
          showToast('Product export initialization failed: ' + response.data, 'error');
        }
      },
      error: function error() {
        showToast('Connection error when starting export', 'error');
        $('#start-product-export').prop('disabled', false);
      }
    });
  });
  function processProductExportBatch(batchNumber, exportSession) {
    var batchSize = parseInt($('#product-export-batch-size').val());
    var productTypes = $('#product-type').val() || [];
    var categories = $('#product-category').val() || [];
    var tags = $('#product-tag').val() || [];
    var totalBatches = Math.ceil(productExportTotalProducts / batchSize);

    // Set a timeout to detect stalled exports (30 seconds)
    clearTimeout(exportTimeout);
    exportTimeout = setTimeout(function () {
      if (productExportIsGenerating) {
        handleExportTimeout(batchNumber, exportSession);
      }
    }, 60000);
    $.ajax({
      url: wcOrderGenerator.ajaxurl,
      type: 'POST',
      data: {
        action: 'export_product_batch',
        nonce: wcOrderGenerator.export_products_nonce,
        batch_size: batchSize,
        batch_number: batchNumber,
        total_batches: totalBatches,
        product_types: productTypes,
        categories: categories,
        tags: tags,
        export_session: exportSession
      },
      success: function success(response) {
        clearTimeout(exportTimeout);
        if (response.success) {
          exportFailedAttempts = 0; // Reset failed attempts on success

          var processed = (batchNumber + 1) * batchSize;
          updateProductExportProgress(Math.min(processed, productExportTotalProducts), response.data.success, response.data.failed);
          if (!response.data.is_last_batch) {
            processProductExportBatch(batchNumber + 1, exportSession);
          } else {
            productExportIsGenerating = false;
            $('#start-product-export').prop('disabled', false);

            // Complete the progress bar to 100%
            $('.product-export-progress-bar').css('width', '100%');
            showToast('Export completed successfully!', 'success');

            // Trigger file download
            if (response.data.download_url) {
              window.location.href = response.data.download_url;
            } else {
              showToast('Download URL not available', 'error');
            }
          }
        } else {
          handleExportError(batchNumber, exportSession, 'Product export batch failed: ' + response.data);
        }
      },
      error: function error() {
        clearTimeout(exportTimeout);
        handleExportError(batchNumber, exportSession, 'Connection error during export');
      }
    });
  }
  function handleExportTimeout(batchNumber, exportSession) {
    handleExportError(batchNumber, exportSession, 'Export operation timed out');
  }
  function handleExportError(batchNumber, exportSession, message) {
    exportFailedAttempts++;
    if (exportFailedAttempts < MAX_FAILED_ATTEMPTS) {
      showToast("".concat(message, ". Retrying... (Attempt ").concat(exportFailedAttempts, "/").concat(MAX_FAILED_ATTEMPTS, ")"), 'warning');
      // Wait 2 seconds before retrying
      setTimeout(function () {
        processProductExportBatch(batchNumber, exportSession);
      }, 2000);
    } else {
      showToast("Export failed after ".concat(MAX_FAILED_ATTEMPTS, " attempts. Please try again."), 'error');
      productExportIsGenerating = false;
      $('#start-product-export').prop('disabled', false);
    }
  }
  function formatDuration(ms) {
    var seconds = Math.floor(ms / 1000) % 60;
    var minutes = Math.floor(ms / (1000 * 60)) % 60;
    var hours = Math.floor(ms / (1000 * 60 * 60));
    if (hours > 0) {
      return "".concat(hours, "h ").concat(minutes, "m ").concat(seconds, "s");
    } else if (minutes > 0) {
      return "".concat(minutes, "m ").concat(seconds, "s");
    } else {
      return "".concat(seconds, "s");
    }
  }
  function updateProductExportProgress(processed, success, failed) {
    // Ensure productExportTotalProducts is initialized and greater than 0
    if (!productExportTotalProducts || productExportTotalProducts <= 0) {
      showToast("Number of products to export not found!", 'info');
      return;
    }
    var percentage = Math.min(processed / productExportTotalProducts * 100, 100); // Ensure it does not exceed 100%

    // Ensure progress bar width is set correctly
    $('.product-export-progress-bar').css({
      'width': percentage + '%',
      'background-color': 'green',
      'height': '25px',
      'transition': 'width 0.5s ease-in-out'
    });

    // Update processed, success, and failed counts
    $('#product-export-total-processed').text(processed);
    $('#product-export-success-count').text(success);
    $('#product-export-failed-count').text(failed);

    // Calculate elapsed time and handle NaN
    var currentTime = Date.now();
    var elapsedTime = productExportStartTime ? currentTime - productExportStartTime : 0;
    $('#product-export-elapsed-time').text(elapsedTime > 0 ? formatDuration(elapsedTime) : '0s');

    // Calculate products per second and handle NaN
    var productsPerSecond = elapsedTime > 0 ? processed / (elapsedTime / 1000) : 0;

    // Calculate remaining time and handle NaN
    var remainingProducts = productExportTotalProducts - processed;
    var estimatedSecondsRemaining = productsPerSecond > 0 ? remainingProducts / productsPerSecond : 0;
    $('#product-export-time-remaining').text(estimatedSecondsRemaining > 0 ? formatDuration(estimatedSecondsRemaining * 1000) : '0s');
  }

  // Reset product export
  $('#reset-product-export').on('click', function () {
    clearTimeout(exportTimeout);
    productExportIsGenerating = false;
    exportFailedAttempts = 0;
    $('.product-export-progress-bar').css('width', '0%');
    $('#product-export-total-processed, #product-export-success-count, #product-export-failed-count').text('0');
    $('#product-export-elapsed-time').text('0s');
    $('#product-export-time-remaining').text('--');
    $('#start-product-export').prop('disabled', false);
  });
});

// Import 
jQuery(document).ready(function ($) {
  if (!$('#toast-container').length) {
    $('body').append('<div id="toast-container" style="position: fixed; top: 40px; right: 20px; z-index: 10000;"></div>');
  }
  function showToast(message) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'success';
    var toast = $("\n            <div class=\"wc-toast ".concat(type, "\">\n                ").concat(message, "\n            </div>\n        "));
    $('#toast-container').append(toast);

    // Trigger reflow and animate in
    setTimeout(function () {
      return toast.css('opacity', '1');
    }, 10);

    // Auto remove after 3 seconds
    setTimeout(function () {
      toast.css('opacity', '0');
      setTimeout(function () {
        return toast.remove();
      }, 300);
    }, 3000);
  }
  $('#order-import-form').on('submit', function (e) {
    e.preventDefault();
    var csvFile = $('.file-upload-input')[0].files[0];

    // Validate file type and extension
    if (!csvFile) {
      showToast('Please select a CSV file', 'warning');
      e.preventDefault();
      return false;
    }
    var allowedTypes = ['text/csv', 'application/vnd.ms-excel'];
    var validExtension = csvFile.name.toLowerCase().endsWith('.csv');
    if (!allowedTypes.includes(csvFile.type) || !validExtension) {
      showToast('Invalid file type. Please upload a .csv file', 'error');
      e.preventDefault();
      return false;
    }

    // Additional size check (optional)
    if (csvFile.size > 5 * 1024 * 1024) {
      showToast('File size exceeds 5MB limit', 'warning');
      e.preventDefault();
      return false;
    }
    var formData = new FormData(this);
    formData.append('action', 'import_orders');
    formData.append('nonce', wcOrderGenerator.import_nonce);
    formData.append('current_batch', 0);
    var startTime = Date.now();
    var totalOrders = 0;
    var totalImportedCount = 0;
    function processNextBatch(formData) {
      $.ajax({
        url: wcOrderGenerator.ajaxurl,
        type: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function success(response) {
          if (response.success) {
            var endTime = Date.now();
            var elapsedTime = Math.floor((endTime - startTime) / 1000);
            totalOrders = response.data.total_orders;
            totalImportedCount += response.data.successful;
            $('#import-total-processed').text(totalImportedCount);
            $('#import-success-count').text(totalImportedCount);
            $('#import-failed-count').text(response.data.failed);
            $('#import-skipped-count').text(response.data.skipped);
            $('#import-elapsed-time').text(elapsedTime + 's');

            // Update progress bar based on actual progress
            var progressPercentage = Math.floor(totalImportedCount / totalOrders * 100);
            $('.import-progress-bar').css({
              'width': progressPercentage + '%',
              'background-color': 'blue',
              'height': '25px',
              'transition': 'width 0.5s ease-in-out'
            });

            // Check if import is complete
            if (response.data.is_complete) {
              showToast('Order Import complete!', 'success');
              $('.import-progress-bar').css('background-color', 'green');
              return;
            }

            // Prepare next batch
            var nextBatchData = new FormData();
            nextBatchData.append('action', 'import_orders');
            nextBatchData.append('nonce', wcOrderGenerator.import_nonce);
            nextBatchData.append('current_batch', response.data.current_batch + 1);
            nextBatchData.append('csv_file', formData.get('csv_file'));
            nextBatchData.append('batch_size', formData.get('batch_size'));

            // Process next batch
            processNextBatch(nextBatchData);
          } else {
            showToast('Order Import failed!' + response.data, 'warning');
          }
        },
        error: function error() {
          showToast('Server error occurred!', 'error');
        }
      });
    }

    // Start batch processing
    processNextBatch(formData);
  });

  // Reset buttons
  $('#reset-order-import').on('click', function () {
    exportIsGenerating = false;
    $('.import-progress-bar').css('width', '0%');
    $('#import-total-processed, #import-success-count, #import-failed-count').text('0');
    $('#import-elapsed-time').text('0s');

    // Reset file upload
    $('.file-upload-input').val('');
    $('.file-upload-preview').html("\n            <div class=\"upload-placeholder\">\n                <i class=\"upload-icon\">\uD83D\uDCE4</i>\n                <span class=\"upload-text\">Drag & Drop or Click to Upload CSV</span>\n            </div>\n        ");
  });
});

// Product import ----------------------------

// Add this to your existing jQuery document ready function
jQuery(document).ready(function ($) {
  if (!$('#toast-container').length) {
    $('body').append('<div id="toast-container" style="position: fixed; top: 40px; right: 20px; z-index: 10000;"></div>');
  }
  function showToast(message) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'success';
    var toast = $("\n            <div class=\"wc-toast ".concat(type, "\">\n                ").concat(message, "\n            </div>\n        "));
    $('#toast-container').append(toast);

    // Trigger reflow and animate in
    setTimeout(function () {
      return toast.css('opacity', '1');
    }, 10);

    // Auto remove after 3 seconds
    setTimeout(function () {
      toast.css('opacity', '0');
      setTimeout(function () {
        return toast.remove();
      }, 300);
    }, 3000);
  }

  // Product Import Form Submission
  $('#product-import-form').on('submit', function (e) {
    e.preventDefault();
    var csvFile = $('#product-import-csv')[0].files[0];

    // Validate file type and extension
    if (!csvFile) {
      showToast('Please select a CSV file', 'warning');
      return false;
    }
    var allowedTypes = ['text/csv', 'application/vnd.ms-excel'];
    var validExtension = csvFile.name.toLowerCase().endsWith('.csv');
    if (!allowedTypes.includes(csvFile.type) && !validExtension) {
      showToast('Invalid file type. Please upload a .csv file', 'error');
      return false;
    }

    // Additional size check (optional)
    if (csvFile.size > 5 * 1024 * 1024) {
      showToast('File size exceeds 5MB limit', 'warning');
      return false;
    }
    var formData = new FormData(this);
    formData.append('action', 'import_products');
    formData.append('nonce', wcOrderGenerator.import_products_nonce); // Use the same nonce or create a new one
    formData.append('current_batch', 0);
    var startTime = Date.now();
    var totalProducts = 0;
    var totalImportedCount = 0;
    var totalFailedCount = 0;
    var totalSkippedCount = 0;
    function processNextBatch(formData) {
      $.ajax({
        url: wcOrderGenerator.ajaxurl,
        type: 'POST',
        data: formData,
        processData: false,
        contentType: false,
        success: function success(response) {
          if (response.success) {
            var endTime = Date.now();
            var elapsedTime = Math.floor((endTime - startTime) / 1000);
            totalProducts = response.data.total_products;
            totalImportedCount += response.data.successful;
            totalFailedCount += response.data.failed;
            totalSkippedCount += response.data.skipped;
            $('#product-import-total-processed').text(totalImportedCount + totalFailedCount + totalSkippedCount);
            $('#product-import-success-count').text(totalImportedCount);
            $('#product-import-failed-count').text(totalFailedCount);
            $('#product-import-skipped-count').text(totalSkippedCount);
            $('#product-import-elapsed-time').text(elapsedTime + 's');

            // Update progress bar based on actual progress
            var progressPercentage = Math.floor((response.data.current_batch * parseInt(formData.get('batch_size')) + response.data.processed) / totalProducts * 100);
            $('.product-import-progress-bar').css({
              'width': progressPercentage + '%',
              'background-color': 'blue',
              'height': '25px',
              'transition': 'width 0.5s ease-in-out'
            });

            // Check if import is complete
            if (response.data.is_complete) {
              showToast('Product Import complete!', 'success');
              $('.product-import-progress-bar').css('background-color', 'green');
              return;
            }

            // Prepare next batch
            var nextBatchData = new FormData();
            nextBatchData.append('action', 'import_products');
            nextBatchData.append('nonce', wcOrderGenerator.import_products_nonce);
            nextBatchData.append('current_batch', response.data.current_batch + 1);
            nextBatchData.append('csv_file', formData.get('csv_file'));
            nextBatchData.append('batch_size', formData.get('batch_size'));

            // Process next batch with a small delay to prevent server overload
            setTimeout(function () {
              processNextBatch(nextBatchData);
            }, 300);
          } else {
            showToast('Product Import failed: ' + (response.data || 'Unknown error'), 'error');
          }
        },
        error: function error(xhr, status, _error2) {
          showToast('Server error occurred: ' + _error2, 'error');
        }
      });
    }

    // Start batch processing
    processNextBatch(formData);
  });

  // Reset product import form
  $('#reset-product-import').on('click', function () {
    $('.product-import-progress-bar').css('width', '0%');
    $('#product-import-total-processed, #product-import-success-count, #product-import-failed-count, #product-import-skipped-count').text('0');
    $('#product-import-elapsed-time').text('0s');

    // Reset file upload
    $('#product-import-csv').val('');
    $('#product-import-form .file-upload-preview').html("\n            <div class=\"upload-placeholder\">\n                <i class=\"upload-icon\">\uD83D\uDCE4</i>\n                <span class=\"upload-text\">Drag & Drop or Click to Upload CSV</span>\n            </div>\n        ");
  });

  // Add file upload preview functionality for product import
  $('#product-import-csv').on('change', function () {
    var file = this.files[0];
    var previewElement = $(this).siblings('.file-upload-preview');
    if (file) {
      previewElement.html("\n                <div class=\"file-preview\">\n                    <i class=\"file-icon\">\uD83D\uDCC4</i>\n                    <span class=\"file-name\">".concat(file.name, "</span>\n                    <span class=\"file-size\">(").concat((file.size / 1024).toFixed(2), " KB)</span>\n                </div>\n            "));
    } else {
      previewElement.html("\n                <div class=\"upload-placeholder\">\n                    <i class=\"upload-icon\">\uD83D\uDCE4</i>\n                    <span class=\"upload-text\">Drag & Drop or Click to Upload CSV</span>\n                </div>\n            ");
    }
  });

  // Add drag and drop functionality for product import
  var productDropArea = $('#product-import-form .file-upload-wrapper');
  productDropArea.on('dragover', function (e) {
    e.preventDefault();
    e.stopPropagation();
    $(this).addClass('dragover');
  });
  productDropArea.on('dragleave', function (e) {
    e.preventDefault();
    e.stopPropagation();
    $(this).removeClass('dragover');
  });
  productDropArea.on('drop', function (e) {
    e.preventDefault();
    e.stopPropagation();
    $(this).removeClass('dragover');
    var files = e.originalEvent.dataTransfer.files;
    if (files.length) {
      $('#product-import-csv')[0].files = files;
      $('#product-import-csv').trigger('change');
    }
  });
});

// Delete Functionality 
jQuery(document).ready(function ($) {
  var RETRY_DELAY = 3000;
  var MAX_RETRIES = 3;
  if (!$('#toast-container').length) {
    $('body').append('<div id="toast-container" style="position: fixed; top: 40px; right: 20px; z-index: 10000;"></div>');
  }
  function showToast(message) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'success';
    var toast = $("\n            <div class=\"wc-toast ".concat(type, "\">\n                ").concat(message, "\n            </div>\n        "));
    $('#toast-container').append(toast);

    // Trigger reflow and animate in
    setTimeout(function () {
      return toast.css('opacity', '1');
    }, 10);

    // Auto remove after 3 seconds
    setTimeout(function () {
      toast.css('opacity', '0');
      setTimeout(function () {
        return toast.remove();
      }, 300);
    }, 3000);
  }
  function showConfirmDialog(type, callback) {
    var confirmDialog = $("\n            <div class=\"wc-confirm-dialog\">\n                <div class=\"wc-confirm-content\">\n                    <h3>Confirm Deletion</h3>\n                    <p>Are you absolutely sure you want to delete ALL ".concat(type, "s? This action cannot be undone!</p>\n                    <div class=\"wc-confirm-buttons\">\n                        <button class=\"button button-secondary cancel-delete\">Cancel</button>\n                        <button class=\"button button-primary confirm-delete\">Confirm Delete</button>\n                    </div>\n                </div>\n            </div>\n        ")).appendTo('body');
    confirmDialog.find('.cancel-delete').on('click', function () {
      confirmDialog.remove();
    });
    confirmDialog.find('.confirm-delete').on('click', function () {
      confirmDialog.remove();
      callback();
    });
  }
  function initializeDelete(type) {
    var retryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    $("#delete-".concat(type, "s-btn .poc-spinner")).show();
    $("#delete-".concat(type, "s-btn")).prop('disabled', true);
    $.ajax({
      url: wcOrderGenerator.ajaxurl,
      type: 'POST',
      data: {
        action: 'poc_get_counts',
        nonce: wcOrderGenerator.poc_nonce
      },
      success: function success(response) {
        if (response.success) {
          var count = type === 'product' ? response.data.product_count : response.data.order_count;
          if (count === 0) {
            showToast("No ".concat(type, "s found to delete."), 'warning');
            // location.reload();
            resetProgress(type);
            return;
          }
          $("#".concat(type, "-total")).text(count);
          var infoHtml = "\n                        <div class=\"info-container\" style=\"display: flex; justify-content: space-between; margin-top: 10px;\">\n                            <div style=\"display: flex; gap: 20px;\">\n                                <div class=\"skip-info\">Skipped: <span id=\"".concat(type, "-skipped\">0</span></div>\n                                <div class=\"retry-info\">Retry: <span id=\"").concat(type, "-retry-count\">0</span></div>\n                            </div>\n                            <div class=\"count-progress\" id=\"").concat(type, "-count-progress\">Progress: 0/").concat(count, "</div>\n                        </div>\n                    ");
          $("#".concat(type, "-progress-container .info-container")).remove();
          $("#".concat(type, "-progress-container")).append(infoHtml);
          $("#".concat(type, "-progress-container")).slideDown(300);
          showToast("Starting ".concat(type, " deletion process..."), 'info');
          setTimeout(function () {
            processBatch(type, 0, count, 0, 0, 0);
          }, 500);
        } else {
          handleError(type, response.data || 'Error getting counts');
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        if (retryCount < MAX_RETRIES) {
          console.log("Retrying initialization after error: ".concat(errorThrown));
          setTimeout(function () {
            initializeDelete(type, retryCount + 1);
          }, RETRY_DELAY);
        } else {
          handleError(type, "Failed to initialize after ".concat(MAX_RETRIES, " attempts: ").concat(errorThrown));
        }
      }
    });
  }
  function processBatch(type, offset, total, skipped, totalProcessed, retryCount) {
    console.log("Processing batch: type=".concat(type, ", offset=").concat(offset, ", total=").concat(total, ", skipped=").concat(skipped, ", totalProcessed=").concat(totalProcessed, ", retryCount=").concat(retryCount));
    $("#".concat(type, "-retry-count")).text(retryCount);
    if (retryCount > 0) {
      skipped = parseInt($("#".concat(type, "-skipped")).text()) + 1;
      $("#".concat(type, "-skipped")).text(skipped);
      showToast("Retrying batch deletion (Attempt ".concat(retryCount, " of ").concat(MAX_RETRIES, ")"), 'warning');
    }
    $.ajax({
      url: wcOrderGenerator.ajaxurl,
      type: 'POST',
      timeout: 30000,
      data: {
        action: "poc_delete_".concat(type, "s_batch"),
        nonce: wcOrderGenerator.poc_nonce,
        offset: offset
      },
      success: function success(response) {
        if (response.success) {
          var batchProcessed = response.data.deleted + response.data.skipped;
          var newTotalProcessed = totalProcessed + batchProcessed;
          var newSkipped = skipped + (response.data.skipped || 0);
          var percentage = Math.round(newTotalProcessed / total * 100);
          $("#".concat(type, "-progress-bar")).css('width', percentage + '%');
          $("#".concat(type, "-processed")).text(newTotalProcessed);
          $("#".concat(type, "-skipped")).text(newSkipped);
          $("#".concat(type, "-count-progress")).text("Progress: ".concat(newTotalProcessed, "/").concat(total));
          $("#".concat(type, "-retry-count")).text('0');
          if (response.data.errors && response.data.errors.length > 0) {
            showToast("Some ".concat(type, "s could not be deleted"), 'warning');
            console.error("Errors during ".concat(type, " deletion:"), response.data.errors);
          }
          if (!response.data.done) {
            setTimeout(function () {
              processBatch(type, offset + batchProcessed, total, newSkipped, newTotalProcessed, 0);
            }, 1000);
          } else {
            setTimeout(function () {
              verifyDeletion(type, newSkipped, newTotalProcessed);
            }, 2000);
          }
        } else {
          if (retryCount < MAX_RETRIES) {
            setTimeout(function () {
              processBatch(type, offset, total, skipped, totalProcessed, retryCount + 1);
            }, RETRY_DELAY);
          } else {
            handleError(type, response.data || "Error deleting ".concat(type, "s"));
          }
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        if (retryCount < MAX_RETRIES) {
          setTimeout(function () {
            processBatch(type, offset, total, skipped, totalProcessed, retryCount + 1);
          }, RETRY_DELAY);
        } else {
          handleError(type, "Failed to process batch after ".concat(MAX_RETRIES, " attempts: ").concat(errorThrown));
        }
      }
    });
  }
  function verifyDeletion(type, skipped, totalProcessed) {
    var retryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    $.ajax({
      url: wcOrderGenerator.ajaxurl,
      type: 'POST',
      data: {
        action: 'poc_get_counts',
        nonce: wcOrderGenerator.poc_nonce
      },
      success: function success(response) {
        if (response.success) {
          var remainingCount = type === 'product' ? response.data.product_count : response.data.order_count;
          $("#delete-".concat(type, "s-btn .poc-spinner")).hide();
          var message;
          if (remainingCount === 0 || remainingCount === skipped) {
            message = "Operation completed!\n".concat(skipped, " ").concat(type, "s were skipped\n").concat(totalProcessed - skipped, " ").concat(type, "s have been successfully deleted!");
            showToast(message, 'success');
          } else if (remainingCount < skipped) {
            message = "Operation completed!\n".concat(remainingCount, " ").concat(type, "s remain\n").concat(totalProcessed - remainingCount, " ").concat(type, "s have been successfully deleted!");
            showToast(message, 'success');
          } else {
            var nextRetryCount = retryCount + 1;
            $("#".concat(type, "-retry-count")).text(nextRetryCount);
            showToast("Additional ".concat(type, "s found. Continuing deletion process... (Attempt ").concat(nextRetryCount, ")"), 'info');
            setTimeout(function () {
              initializeDelete(type);
            }, 5000);
            return;
          }

          // Show detailed results in a notice
          var noticeHtml = "\n                        <div class=\"notice notice-success\">\n                            <p>".concat(message.replace(/\n/g, '<br>'), "</p>\n                        </div>\n                    ");

          // Insert the notice at the top of the page
          $('.wrap h2').after(noticeHtml);
        } else {
          handleError(type, "Error verifying ".concat(type, " deletion"));
        }
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        if (retryCount < MAX_RETRIES) {
          setTimeout(function () {
            verifyDeletion(type, skipped, totalProcessed, retryCount + 1);
          }, RETRY_DELAY);
        } else {
          handleError(type, "Failed to verify deletion after ".concat(MAX_RETRIES, " attempts: ").concat(errorThrown));
        }
      }
    });
  }
  function handleError(type, errorMessage) {
    console.error(errorMessage);
    $("#delete-".concat(type, "s-btn .poc-spinner")).hide();
    $("#delete-".concat(type, "s-btn")).prop('disabled', false);
    showToast(errorMessage, 'error');
  }
  $('#delete-products-btn').click(function () {
    showConfirmDialog('product', function () {
      initializeDelete('product');
    });
  });
  $('#delete-orders-btn').click(function () {
    showConfirmDialog('order', function () {
      initializeDelete('order');
    });
  });

  // Reset Button 
  ['product', 'order'].forEach(function (type) {
    $('<button>', {
      id: "reset-".concat(type, "-progress-btn"),
      "class": 'button button-secondary',
      text: 'Reset',
      css: {
        'float': 'right',
        'margin-left': '10px'
      }
    }).insertAfter("#".concat(type, "-progress-container"));
  });

  // Reset function
  function resetProgress(type) {
    // Reset progress bar
    $("#".concat(type, "-progress-bar")).css('width', '0%');

    // Reset counters
    $("#".concat(type, "-processed")).text('0');
    $("#".concat(type, "-total")).text('0');
    $("#".concat(type, "-skipped")).text('0');
    $("#".concat(type, "-retry-count")).text('0');
    $("#".concat(type, "-count-progress")).text('Progress: 0/0');

    // Enable delete button if it was disabled
    $("#delete-".concat(type, "s-btn")).prop('disabled', false);

    // Hide spinner if it was visible
    $("#delete-".concat(type, "s-btn .poc-spinner")).hide();

    // Show toast notification
    showToast("".concat(type.charAt(0).toUpperCase() + type.slice(1), " progress has been reset successfully!"), 'success');
  }

  // Bind click events to reset buttons
  $('#reset-product-progress-btn').on('click', function () {
    resetProgress('product');
  });
  $('#reset-order-progress-btn').on('click', function () {
    resetProgress('order');
  });
});
})();

// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";
/*!***************************!*\
  !*** ./css/generator.css ***!
  \***************************/
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin

})();

/******/ })()
;
//# sourceMappingURL=generator.min.js.map